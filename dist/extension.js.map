{"version":3,"file":"extension.js","mappings":"swBAEA,kBAIA,oBAAyBA,GAGvBC,QAAQC,IACN,oEAMF,IAAIC,EAAaC,EAAOC,SAASC,gBAC/B,8BACA,KACEC,GAAQ,IAIZP,EAAQQ,cAAcC,KAAKN,EAC7B,EAEA,MAAMI,EAASG,UACb,MAAMC,EAASP,EAAOQ,OAAOC,iBAC7B,IAAKF,EAEH,YADAP,EAAOQ,OAAOE,uBAAuB,uBAIvC,MAAMC,EAAMJ,EAAOK,SACbC,EAAiBN,EAAOO,UAAUC,OAElCC,EAAgD,CACpD,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAGDC,EAA0C,CAC9C,IAAK,IACL,IAAK,IACL,IAAK,KAIP,IAAIC,EAAgC,KAChCC,EAAgC,KAChCC,EAAqC,KACrCC,EAAqC,KAEzC,MAAMC,EAAoBhB,UACxB,KAAKY,GAAmBC,GAAmBC,GAAeC,GACxD,OAEF,MAAME,EAAe,IAAIvB,EAAOwB,MAC9BJ,EACA,IAAIpB,EAAOyB,SAASL,EAAWM,KAAMN,EAAWO,UAAY,IAExDC,EAAe,IAAI5B,EAAOwB,MAC9BH,EACA,IAAIrB,EAAOyB,SAASJ,EAAWK,KAAML,EAAWM,UAAY,UAGxDpB,EAAOsB,MAAMC,IACjBA,EAAYC,QAAQR,EAAcP,EAAiBE,IACnDY,EAAYC,QAAQH,EAAcZ,EAAiBG,GAAiB,GACpE,EAGJa,EAAU,IAAK,IAAIN,EAAOb,EAAea,KAAMA,GAAQ,EAAGA,IAAQ,CAChE,IAAIO,EAAWtB,EAAIuB,OAAOR,GAAMS,KAGhCC,EAAe,IACb,IAAIC,GAFJX,IAASb,EAAea,KAAOb,EAAec,UAAYM,EAASK,QAEtC,EAC7BD,GAAW,EACXA,IAEA,GAAIE,OAAOC,KAAKvB,GAAcwB,SAASR,EAASI,IAAW,CACzDnB,EAAiBe,EAASI,GAC1BjB,EAAa,IAAIpB,EAAOyB,SAASC,EAAMW,GAGvC,IAAIK,EAAQ,EACZ,IACE,IAAIC,EAAcjB,EAClBiB,EAAchC,EAAIiC,UAClBD,IACA,CACA,IAAIE,EAAkBlC,EAAIuB,OAAOS,GAAaR,KAE9C,IACE,IAAIW,EAFoBH,IAAgBjB,EAAOW,EAAU,EAAI,EAG7DS,EAAiBD,EAAgBP,OACjCQ,IAEA,GAAID,EAAgBC,KAAoB5B,EACtCwB,SACK,GACLG,EAAgBC,KAAoB7B,EAAaC,KAEjDwB,IACc,IAAVA,GAAa,CAKf,GAHArB,EAAa,IAAIrB,EAAOyB,SAASkB,EAAaG,GAC9C3B,EAAiB0B,EAAgBC,GAE7BzB,EAAW0B,SAASlC,GACtB,SAASuB,EAIX,YADAd,GAEF,CAGN,CACA,SAASU,CACX,CAEJ,CAEAhC,EAAOQ,OAAOE,uBAAuB,mCAAmC,EAI1E,wBAA8B,C,UCrI9BsC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://toggle-brackets/./src/extension.ts","webpack://toggle-brackets/external commonjs \"vscode\"","webpack://toggle-brackets/webpack/bootstrap","webpack://toggle-brackets/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log(\n    'Congratulations, your extension \"toggle-brackets\" is now active!'\n  );\n\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n  let disposable = vscode.commands.registerCommand(\n    \"toggle-brackets.helloWorld\",\n    () => {\n      toggle();\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\nconst toggle = async () => {\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    vscode.window.showInformationMessage(\"No editor is active\");\n    return;\n  }\n\n  const doc = editor.document;\n  const cursorPosition = editor.selection.active;\n\n  const bracketTransform: { [index: string]: string } = {\n    \"(\": \"{\",\n    \"{\": \"[\",\n    \"[\": \"(\",\n    \")\": \"}\",\n    \"}\": \"]\",\n    \"]\": \")\",\n  };\n\n  const bracketPairs: { [key: string]: string } = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\",\n  };\n\n  // Initialize variables for bracket search\n  let openingBracket: string | null = null;\n  let closingBracket: string | null = null;\n  let openingPos: vscode.Position | null = null;\n  let closingPos: vscode.Position | null = null;\n\n  const updateBracketPair = async () => {\n    if (!openingBracket || !closingBracket || !openingPos || !closingPos) {\n      return;\n    }\n    const openingRange = new vscode.Range(\n      openingPos,\n      new vscode.Position(openingPos.line, openingPos.character + 1)\n    );\n    const closingRange = new vscode.Range(\n      closingPos,\n      new vscode.Position(closingPos.line, closingPos.character + 1)\n    );\n\n    await editor.edit((editBuilder) => {\n      editBuilder.replace(openingRange, bracketTransform[openingBracket!]);\n      editBuilder.replace(closingRange, bracketTransform[closingBracket!]);\n    });\n  };\n\n  lineLoop: for (let line = cursorPosition.line; line >= 0; line--) {\n    let lineText = doc.lineAt(line).text;\n    let startCharIdx =\n      line === cursorPosition.line ? cursorPosition.character : lineText.length;\n    characterLoop: for (\n      let charIdx = startCharIdx - 1;\n      charIdx >= 0;\n      charIdx--\n    ) {\n      if (Object.keys(bracketPairs).includes(lineText[charIdx])) {\n        openingBracket = lineText[charIdx];\n        openingPos = new vscode.Position(line, charIdx);\n\n        // Depth counter to handle nested brackets\n        let depth = 1;\n        for (\n          let closingLine = line;\n          closingLine < doc.lineCount;\n          closingLine++\n        ) {\n          let closingLineText = doc.lineAt(closingLine).text;\n          let closingStartCharIdx = closingLine === line ? charIdx + 1 : 0;\n          for (\n            let closingCharIdx = closingStartCharIdx;\n            closingCharIdx < closingLineText.length;\n            closingCharIdx++\n          ) {\n            if (closingLineText[closingCharIdx] === openingBracket) {\n              depth++;\n            } else if (\n              closingLineText[closingCharIdx] === bracketPairs[openingBracket]\n            ) {\n              depth--;\n              if (depth === 0) {\n                // Matching closing bracket found\n                closingPos = new vscode.Position(closingLine, closingCharIdx);\n                closingBracket = closingLineText[closingCharIdx];\n\n                if (closingPos.isBefore(cursorPosition)) {\n                  continue characterLoop;\n                }\n\n                updateBracketPair();\n                return;\n              }\n            }\n          }\n        }\n        continue lineLoop;\n      }\n    }\n  }\n\n  vscode.window.showInformationMessage(\"Matching bracket pair not found.\");\n};\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","toggle","subscriptions","push","async","editor","window","activeTextEditor","showInformationMessage","doc","document","cursorPosition","selection","active","bracketTransform","bracketPairs","openingBracket","closingBracket","openingPos","closingPos","updateBracketPair","openingRange","Range","Position","line","character","closingRange","edit","editBuilder","replace","lineLoop","lineText","lineAt","text","characterLoop","charIdx","length","Object","keys","includes","depth","closingLine","lineCount","closingLineText","closingCharIdx","isBefore","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}